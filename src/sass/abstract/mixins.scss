/// @name add all fonts
/// @author Stevan Stojanovic
/// @param $font-names {string/string's} provide the list of font names/or single font name

@mixin add-all-fonts(
  $map: $fcm-map-of-fonts,
	$path: $fcm-font-path) {
  @if ($map != null) {
    @each $font-type, $font-name in $map {
      @font-face {
        font-family: $font-type;
        font-style: normal;
        font-weight: normal;
        src: url('#{$path}' + '#{$font-name}');
      }
    }
  } @else {
    @warn "'#{$map}' should be placed as argument";
  }
}

/// @name generate-icon-by-size
/// @author Stevan Stojanovic
/// @param $map {map} of icons stored by theirs size
/// @param $unit {string} unit used for determining size of the icon wrapper

@mixin generate-icon-by-size(
  $map: $fcm-list-of-custom-icon-names,
  $unit: 'rem') {
  $map-keys: map-keys($map);
  
  @each $key in $map-keys {
    
    @each $sub-key in map-deep-get($map, $key) {
      
      .#{$sub-key}-icon {
        display: inline-flex;
        justify-content: center;
        align-items: center;
        width: unquote($key) + unquote($unit);
        height: unquote($key) + unquote($unit);
        position: relative;
        cursor: pointer;
        
        &::before {
          background-position: center;
          background-size: contain;
          content: '';
          height: unquote($key) + unquote($unit);
          width: unquote($key) + unquote($unit);
          background-image: url($fcm-img-path + $sub-key + ".svg");
        }
      }
    }
  }
}

/// @name class name same as team member name
/// @author Stevan Stojanovic
/// @param $class-list {list} of team players stored in var.scss

@mixin class-name-same-as-background-image-name(
  $member-list: $fcm-list-of-players) {
  
  $header-img-path: $fcm-img-path + 'players/details/header/';
  $body-img-path: $fcm-img-path + 'players/details/body/';
  $sufix: '.png';
  
  @for $i from 1 through length($member-list) {
    $list-of-classes: nth($member-list, $i);
    
    @each $class in $list-of-classes {
      
      .#{$prefix}profile-header-player-img {
        
        &.#{$class} {
          background-image: url($header-img-path + 'details-header-' + $class + $sufix);
        }
      }
      
      .#{$prefix}profile-body-player-img {
        
        &.#{$class} {
          background-image: url($body-img-path + 'details-body-' + $class + $sufix);
        }
      }
    }
  }
}

/// @name class name same as flag name
/// @author Stevan Stojanovic
/// @param $class-list {list} of flags stored in var.scss

@mixin class-name-same-as-flag-name(
  $flag-list: $fcm-list-of-flags) {
  
  $flag-path: $fcm-img-path + 'flags/';
  $sufix: '.svg';
  
  @for $i from 1 through length($flag-list) {
    $list-of-classes: nth($flag-list, $i);
    
    @each $class in $list-of-classes {
      .#{$class}-flag {
        background-image: url($flag-path + $class + $sufix);
      }
    }
  }
}

@mixin quntity-queries($all-queries: true, $total-queries: null, $query: null, $html-element: 'div') {
  @warn "This mixin is related to the child inside it's parrent " +
           "so in order to get desired result please call this mixin whitin parrent";
  
  @if ($all-queries == true and $total-queries != null and is-number($total-queries) == true) {
    @warn "You are using this mixin for all children inside it' parrent";
    /// styling first child related to number of last child in it's parrent
    #{$html-element} {
      &:nth-last-child(#{$total-queries}) {
        &:first-child,
        &:first-child ~ * {
          @content;
        }
      }
    }
  }
  @else if ($all-queries != true and $total-queries == nul and is-number($total-queries) != true and $query == null and is-number($total-queries) != true ) {
    @warn "You are using this mixin for specific child inside it's parrent but not providing all neccecery arguments or invalid type of arguments";
  }
  
  @else {
    @warn "You are using this mixin for specific child inside it's parrent";
    #{$html-element} {
      &:nth-last-child(#{$total-queries}) {
        &:first-child ~ {
          #{$html-element}::nth-of-type(#{$query}) {
            @content;
          }
        }
      }
    }
  }
}
